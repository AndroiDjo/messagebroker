// Code generated by protoc-gen-go. DO NOT EDIT.
// source: broker.proto

package mbproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ConsumeRequest_Action int32

const (
	ConsumeRequest_SUBSCRIBE   ConsumeRequest_Action = 0
	ConsumeRequest_UNSUBSCRIBE ConsumeRequest_Action = 1
)

var ConsumeRequest_Action_name = map[int32]string{
	0: "SUBSCRIBE",
	1: "UNSUBSCRIBE",
}

var ConsumeRequest_Action_value = map[string]int32{
	"SUBSCRIBE":   0,
	"UNSUBSCRIBE": 1,
}

func (x ConsumeRequest_Action) String() string {
	return proto.EnumName(ConsumeRequest_Action_name, int32(x))
}

func (ConsumeRequest_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{0, 0}
}

type ConsumeRequest struct {
	Action ConsumeRequest_Action `protobuf:"varint,1,opt,name=action,proto3,enum=mbproto.ConsumeRequest_Action" json:"action,omitempty"`
	// Keys is a list of words divided by dot. May be specified as exact key or pattern.
	// Word should contain only 0-9a-zA-Z characters.
	// Instead of word may be specified:
	// * (star) can substitute for exactly one word.
	// # (hash) can substitute for zero or more words.
	Keys                 []string `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeRequest) Reset()         { *m = ConsumeRequest{} }
func (m *ConsumeRequest) String() string { return proto.CompactTextString(m) }
func (*ConsumeRequest) ProtoMessage()    {}
func (*ConsumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{0}
}

func (m *ConsumeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeRequest.Unmarshal(m, b)
}
func (m *ConsumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeRequest.Marshal(b, m, deterministic)
}
func (m *ConsumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeRequest.Merge(m, src)
}
func (m *ConsumeRequest) XXX_Size() int {
	return xxx_messageInfo_ConsumeRequest.Size(m)
}
func (m *ConsumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeRequest proto.InternalMessageInfo

func (m *ConsumeRequest) GetAction() ConsumeRequest_Action {
	if m != nil {
		return m.Action
	}
	return ConsumeRequest_SUBSCRIBE
}

func (m *ConsumeRequest) GetKeys() []string {
	if m != nil {
		return m.Keys
	}
	return nil
}

type ConsumeResponse struct {
	// Key is a list of words divided by dot. Word should contain only 0-9a-zA-Z characters.
	// For example: aaa, aaa.bbb, ccc.123.ddd, etc.
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConsumeResponse) Reset()         { *m = ConsumeResponse{} }
func (m *ConsumeResponse) String() string { return proto.CompactTextString(m) }
func (*ConsumeResponse) ProtoMessage()    {}
func (*ConsumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{1}
}

func (m *ConsumeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsumeResponse.Unmarshal(m, b)
}
func (m *ConsumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsumeResponse.Marshal(b, m, deterministic)
}
func (m *ConsumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsumeResponse.Merge(m, src)
}
func (m *ConsumeResponse) XXX_Size() int {
	return xxx_messageInfo_ConsumeResponse.Size(m)
}
func (m *ConsumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsumeResponse proto.InternalMessageInfo

func (m *ConsumeResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ConsumeResponse) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProduceRequest struct {
	// Key is a list of words divided by dot. Word should contain only 0-9a-zA-Z characters.
	// For example: aaa, aaa.bbb, ccc.123.ddd, etc.
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceRequest) Reset()         { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()    {}
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{2}
}

func (m *ProduceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceRequest.Unmarshal(m, b)
}
func (m *ProduceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceRequest.Marshal(b, m, deterministic)
}
func (m *ProduceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceRequest.Merge(m, src)
}
func (m *ProduceRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceRequest.Size(m)
}
func (m *ProduceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceRequest proto.InternalMessageInfo

func (m *ProduceRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *ProduceRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

type ProduceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceResponse) Reset()         { *m = ProduceResponse{} }
func (m *ProduceResponse) String() string { return proto.CompactTextString(m) }
func (*ProduceResponse) ProtoMessage()    {}
func (*ProduceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f209535e190f2bed, []int{3}
}

func (m *ProduceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceResponse.Unmarshal(m, b)
}
func (m *ProduceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceResponse.Marshal(b, m, deterministic)
}
func (m *ProduceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceResponse.Merge(m, src)
}
func (m *ProduceResponse) XXX_Size() int {
	return xxx_messageInfo_ProduceResponse.Size(m)
}
func (m *ProduceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("mbproto.ConsumeRequest_Action", ConsumeRequest_Action_name, ConsumeRequest_Action_value)
	proto.RegisterType((*ConsumeRequest)(nil), "mbproto.ConsumeRequest")
	proto.RegisterType((*ConsumeResponse)(nil), "mbproto.ConsumeResponse")
	proto.RegisterType((*ProduceRequest)(nil), "mbproto.ProduceRequest")
	proto.RegisterType((*ProduceResponse)(nil), "mbproto.ProduceResponse")
}

func init() {
	proto.RegisterFile("broker.proto", fileDescriptor_f209535e190f2bed)
}

var fileDescriptor_f209535e190f2bed = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0xcf, 0x4e, 0x83, 0x40,
	0x10, 0xc6, 0x9d, 0xd6, 0x40, 0x18, 0x5b, 0xa8, 0x73, 0x91, 0x78, 0x30, 0x84, 0xd3, 0x9e, 0x88,
	0xa9, 0x89, 0x27, 0x35, 0x4a, 0xe3, 0xc1, 0x83, 0xc6, 0x6c, 0xd3, 0x07, 0x80, 0x76, 0x62, 0x0c,
	0x96, 0x45, 0x16, 0x0e, 0xbc, 0x80, 0x77, 0xdf, 0xd8, 0xb8, 0x20, 0x16, 0x3d, 0xf5, 0xf6, 0xed,
	0xce, 0xef, 0x9b, 0x3f, 0x1f, 0x4e, 0xd2, 0x52, 0x65, 0x5c, 0x46, 0x45, 0xa9, 0x2a, 0x45, 0xf6,
	0x36, 0x35, 0x22, 0xfc, 0x00, 0x74, 0x17, 0x2a, 0xd7, 0xf5, 0x96, 0x25, 0xbf, 0xd7, 0xac, 0x2b,
	0xba, 0x44, 0x2b, 0x59, 0x57, 0xaf, 0x2a, 0xf7, 0x21, 0x00, 0xe1, 0xce, 0xcf, 0xa2, 0x0e, 0x8e,
	0x86, 0x60, 0x74, 0x67, 0x28, 0xd9, 0xd1, 0x44, 0x78, 0x98, 0x71, 0xa3, 0xfd, 0x51, 0x30, 0x16,
	0x8e, 0x34, 0x3a, 0x14, 0x68, 0xb5, 0x14, 0x4d, 0xd1, 0x59, 0xae, 0xe2, 0xe5, 0x42, 0x3e, 0xc4,
	0xf7, 0xb3, 0x03, 0xf2, 0xf0, 0x68, 0xf5, 0xf4, 0xfb, 0x01, 0xe1, 0x35, 0x7a, 0x7d, 0x7b, 0x5d,
	0xa8, 0x5c, 0x33, 0xcd, 0x70, 0x9c, 0x71, 0x63, 0xb6, 0x70, 0xe4, 0xb7, 0x24, 0x1f, 0xed, 0x22,
	0x69, 0xde, 0x54, 0xb2, 0xf1, 0x47, 0x01, 0x88, 0x89, 0xfc, 0x79, 0x86, 0x57, 0xe8, 0x3e, 0x97,
	0x6a, 0x53, 0xaf, 0xfb, 0x33, 0xf6, 0x71, 0x1f, 0xa3, 0xd7, 0xbb, 0xdb, 0xe1, 0xf3, 0x4f, 0xc0,
	0xe9, 0x23, 0x6b, 0x9d, 0xbc, 0x70, 0x6c, 0x92, 0xa3, 0x1b, 0xb4, 0x3b, 0x88, 0x4e, 0xfa, 0x48,
	0x86, 0x43, 0x4f, 0xfd, 0xff, 0x85, 0xb6, 0x9f, 0x00, 0xba, 0x45, 0xbb, 0xbb, 0x70, 0xc7, 0x3f,
	0x8c, 0x74, 0xc7, 0xff, 0x27, 0x0c, 0x01, 0xe7, 0x90, 0x5a, 0xa6, 0x74, 0xf1, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x3e, 0x4c, 0xbf, 0xb0, 0xcc, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MessageBrokerClient is the client API for MessageBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessageBrokerClient interface {
	Produce(ctx context.Context, opts ...grpc.CallOption) (MessageBroker_ProduceClient, error)
	Consume(ctx context.Context, opts ...grpc.CallOption) (MessageBroker_ConsumeClient, error)
}

type messageBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageBrokerClient(cc grpc.ClientConnInterface) MessageBrokerClient {
	return &messageBrokerClient{cc}
}

func (c *messageBrokerClient) Produce(ctx context.Context, opts ...grpc.CallOption) (MessageBroker_ProduceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageBroker_serviceDesc.Streams[0], "/mbproto.MessageBroker/Produce", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBrokerProduceClient{stream}
	return x, nil
}

type MessageBroker_ProduceClient interface {
	Send(*ProduceRequest) error
	CloseAndRecv() (*ProduceResponse, error)
	grpc.ClientStream
}

type messageBrokerProduceClient struct {
	grpc.ClientStream
}

func (x *messageBrokerProduceClient) Send(m *ProduceRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageBrokerProduceClient) CloseAndRecv() (*ProduceResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ProduceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageBrokerClient) Consume(ctx context.Context, opts ...grpc.CallOption) (MessageBroker_ConsumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MessageBroker_serviceDesc.Streams[1], "/mbproto.MessageBroker/Consume", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageBrokerConsumeClient{stream}
	return x, nil
}

type MessageBroker_ConsumeClient interface {
	Send(*ConsumeRequest) error
	Recv() (*ConsumeResponse, error)
	grpc.ClientStream
}

type messageBrokerConsumeClient struct {
	grpc.ClientStream
}

func (x *messageBrokerConsumeClient) Send(m *ConsumeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageBrokerConsumeClient) Recv() (*ConsumeResponse, error) {
	m := new(ConsumeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageBrokerServer is the server API for MessageBroker service.
type MessageBrokerServer interface {
	Produce(MessageBroker_ProduceServer) error
	Consume(MessageBroker_ConsumeServer) error
}

// UnimplementedMessageBrokerServer can be embedded to have forward compatible implementations.
type UnimplementedMessageBrokerServer struct {
}

func (*UnimplementedMessageBrokerServer) Produce(srv MessageBroker_ProduceServer) error {
	return status.Errorf(codes.Unimplemented, "method Produce not implemented")
}
func (*UnimplementedMessageBrokerServer) Consume(srv MessageBroker_ConsumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Consume not implemented")
}

func RegisterMessageBrokerServer(s *grpc.Server, srv MessageBrokerServer) {
	s.RegisterService(&_MessageBroker_serviceDesc, srv)
}

func _MessageBroker_Produce_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageBrokerServer).Produce(&messageBrokerProduceServer{stream})
}

type MessageBroker_ProduceServer interface {
	SendAndClose(*ProduceResponse) error
	Recv() (*ProduceRequest, error)
	grpc.ServerStream
}

type messageBrokerProduceServer struct {
	grpc.ServerStream
}

func (x *messageBrokerProduceServer) SendAndClose(m *ProduceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageBrokerProduceServer) Recv() (*ProduceRequest, error) {
	m := new(ProduceRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageBroker_Consume_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageBrokerServer).Consume(&messageBrokerConsumeServer{stream})
}

type MessageBroker_ConsumeServer interface {
	Send(*ConsumeResponse) error
	Recv() (*ConsumeRequest, error)
	grpc.ServerStream
}

type messageBrokerConsumeServer struct {
	grpc.ServerStream
}

func (x *messageBrokerConsumeServer) Send(m *ConsumeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageBrokerConsumeServer) Recv() (*ConsumeRequest, error) {
	m := new(ConsumeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageBroker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mbproto.MessageBroker",
	HandlerType: (*MessageBrokerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Produce",
			Handler:       _MessageBroker_Produce_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Consume",
			Handler:       _MessageBroker_Consume_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "broker.proto",
}
